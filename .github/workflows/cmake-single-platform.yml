# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake CI

on:
  push:
    branches: [ "dev", "feature/**"]
  pull_request:
    branches: [ "dev" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
      with: 
        submodules: 'recursive'

    - name: Install dependencies
      # Add steps to install any dependencies your project might have. For example:
      run: choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'

    - name: Configure CMake
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
    
      # Adjust the generator (-G) as per the installed Visual Studio version or prefer using "Ninja" for faster builds if available.

    - name: Build
      # Build with CMake. If you're using Visual Studio generator, specify the configuration.
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -- /m
      # The `-- /m` flag enables parallel builds in Visual Studio.

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests. Adjust command as needed for your test setup.
      run: ctest -C ${{env.BUILD_TYPE}}

